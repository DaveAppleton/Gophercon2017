So what's all this blockchain stuff anyway?
Ethereum for go developers
Tags: Ethereum, Solidity, Smart Contracts, Ruby Tuesdays

Dave Appleton
Blockchain Developer, HelloGold
calistralabs@gmail.com
https://hellogold.com
@AppletonDave

* Quick Intro / commercial break

.image HG.png

- HelloGold is platform to allow the average Malaysian to buy, store and sell investment grade gold at close to international spot prices as a means of diversifying their savings portfolio.
- Founded by former CFO of World Gold Council
- CTO is former VP of Bangkok Bank 
- Partnering with AEON Credit
- Fully allocated gold vaulted in fully insured vault in Singapore
- Developing a backend using Ethereum Smart Contracts 



* Personal philosophy w.r.t. blockchain

.image blockchain.jpg 


* What I AM going to cover
- What is a blockchain?
- What is special about Ethereum?
- Programming smart contracts
- talking to contracts from go


* What is a blockchain?
- signed transactions
- Put into signed blocks
- Which are added to a chain
- in a manner such that all the independant nodes that operate the network agree the whole thing to be valid (consensus)

* Transactions ?

- Anything that can change the state of something.
- Analagous to a REST Call

So what are all these transactions doing?

Web analogy:

.code demo_code.txt /start REST OMIT/,/end REST OMIT/

We are all used to ACCOUNTING transactions that transfer value.

Current state = sum of previous transactions

* Thought of the day....

"Young man, in mathematics you don't understand things. You just get used to them."

.caption John von Neumann.

* Digital Signatures
- I am going to assume that you understand hashing
- let's try...
- change the comma after "Young man" to a full stop & rehash
- a small change in the content causes a huge change in the result.
.play hashBaby.go  /start main OMIT/,/end main OMIT/
- now encrypt the hash value using public key encryption....

* Public Key encryption in 20 seconds
- create a random a private key (it's mathematical)
- public key derived from private key (but not vice versa)
- address is derived from public key
- something encrypted by private key can be read with public key
- with public key you can prove it was encrypted by owner of private key.
- encrypting the hash, ensures that the hash, thus the document is unchanged
- and ensures that the signer is who they say they are.

.code demo_code.txt /start RESTx OMIT/,/end RESTx OMIT/

* Consensus
- design of consensus algorithm ensures that no one node makes all the decisions
- makes it virtually impossible for anybody to modify the past records in the chain



Enter BITCOIN and 1000 other AltCoins

Mathematics and computer science guarantee ownership and scarcity.

* So what is Ethereum doing differently?
- The nodes are not just accounting machines
- A transaction does not JUST have to transfer value
- A transaction can *POST* a _contract_ * 
- Another transaction can *call* that contract
- Just like you *could* post a script and have it delivered to a script folder on a server
- Ethereum becomes a distributed computer
- code is compiled into byte code
- byte code is placed on the blockchain
- every node has a Virtual Machine (byte code interpreter)
- users of the contract need to know the available entry points

  * kinda like code injection
* What is a contract?
- bytecode
- called a bit like RPC
- like any program in that it has
-- instance data that is persistent
-- methods with parameters and local data
-- constructors
-- it can hold value (ETH or tokens)
-- it can send and receive ETH or tokens
-- it is executed by *every* node to get consensus

Consensus is the agreement on the transactions. 

The effect is that the internal state of each node will be the same.

* Two ways to interact
- *Transactions*
-- make changes to the storage (and cost Ether)
-- Executed on every node
-- can only return results by _events_

(caveat - one contract can transact on another *and* get returned data)

If a transaction fails *ALL* changes are reversed and *NO* logs produced.

- *Calls*		
-- query the state of the storage or the results of a calculation
-- only executed on local node
-- get an immediate response
-- cannot change the state of the storage

* Let's make up a problem...

.image smart_meter.jpg
.caption can't think what inspired this...

* Building A Contract

.code demo_code.txt  /start skeleton OMIT/,/end skeleton OMIT/

kinda familar - let's see the core data structure

.code PowerTokenPresent.sol  /start fa OMIT/,/end fa OMIT/

* The Constructor

.code PowerTokenPresent.sol  /start constructor OMIT/,/end constructor OMIT/

* setup, enquiry and paying the bill

.code PowerTokenPresent.sol  /start cs OMIT/,/end cs OMIT/

.code PowerTokenPresent.sol  /start balance OMIT/,/end balance OMIT/

.code PowerTokenPresent.sol  /start xfer OMIT/,/end xfer OMIT/

What are MustBeTech & MustBeTeller ?

* Must be Teller??
 
 
 
 
.image teller.jpg

.caption Don't blame me, Sau Sheong wanted a joke

* Modifiers

Modifiers are an easy way to add a prefix to a function for code reuse.

"throw" causes the transaction to be terminated and changes rolled back.

.code PowerTokenPresent.sol  /start mod OMIT/,/end mod OMIT/

* Events

Events put data into the log (along with the recorded transaction) and can be detected by event handlers in wallets etc.

   event ErrorEvent(string message, address meter, address user, uint256 last, uint256 current);

.image events.png 300 1000

* Updating the readings

.code PowerTokenPresent.sol  /start basic OMIT/,/end basic OMIT/


* How to use it?

- clone github.com/etherum/go-ethereum into GOPATH
- run make
- run abigen --sol=Power.sol --pkg=main --out=power.go

Abigen builds a complete interface for talking to the contract. e.g.

.code power.go /start deploy OMIT/,/end deploy OMIT/

* But you....

- load the key file & deploy

.code test.go  /start deploy OMIT/,/end deploy OMIT/

* talk to the contract

- make calls

.code test.go  /start bal OMIT/,/end bal OMIT/

- and transactions

.code test.go  /start pay OMIT/,/end pay OMIT/

* using etherscan

.image etherscan.png 500 800

* record of transactions

.image txlist.png 500 800

* So, what have we achieved?

- An immutable record system
- Role restricted activities
- Records that cannot be forged
- Publicly auditable data

using an easily available infrastructure with minimal setup.

